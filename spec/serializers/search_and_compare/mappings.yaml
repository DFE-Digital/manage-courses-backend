---
# Shared/Nested/Complex
Provider_default_value_Mapping: &Provider_default_value
  Id: 0
  Courses:
  AccreditedCourses:

Provider_direct_simple_Mapping: &Provider_direct_simple
  Name: provider_name
  _Name: mapped
  ProviderCode: provider_code
  _ProviderCode: mapped

Provider_Mapping: &Provider # Has a provider
  <<: *Provider_default_value
  <<: *Provider_direct_simple

IsSalaried_Mapping: &IsSalaried
  IsSalaried: '!course.is_fee_based?'
  _IsSalaried: mapped

Route_Mapping: &Route
  Id: 0
  _Id: default_value
  Name: course.program_type
  _Name: mapped
    # public string Route => GetRoute();
    # private string GetRoute()
    # {
    #     if (string.IsNullOrWhiteSpace(ProgramType))
    #     {
    #         return "";
    #     }

    #     var route = ProgramType.ToLowerInvariant();

    #     switch (route)
    #     {
    #         case "he":
    #             return "Higher education programme";
    #         case "sd":
    #             return "School Direct training programme";
    #         case "ss":
    #             return "School Direct (salaried) training programme";
    #         case "sc":
    #             return "SCITT programme";
    #         case "ta":
    #             return "PG Teaching Apprenticeship";
    #         default:
    #             return "";
    #     }
    # }
  <<: &IsSalaried_Mapping
  Courses:
  _Courses: default_value

DescriptionSection_Mapping: &DescriptionSection
  Id: 0
  _Id: default_value
  Ordinal: 0
  _Ordinal: default_value
  CourseId: 0
  _CourseId: default_value
  Course:
  _Course: default_value

Location_Mapping: &Location
  Id: 0
  _Id: default_value
  Address:
  _Address: not_mapped
  FormattedAddress:
  _FormattedAddress: default_value
  GeoAddress:
  _GeoAddress: default_value
  Latitude:
  _Latitude: default_value
  Longitude:
  _Longitude: default_value
  _LastGeocodedUtc: default_value
  LastGeocodedUtc: '0001-01-01T00:00:00'
  _LastGeocodedUtc: default_value

Campus_Mapping: &Campus
  Id: 0
  _Id: default_value
  Name:
  _Name: not_mapped
  CampusCode:
  _CampusCode: not_mapped
  LocationId:
  _LocationId: default_value
  VacStatus: F
  Course:
  _Course: default_value

Subject_Mapping: &Subject
  Id: 0
  _Id: default_value
  SubjectArea:
  _SubjectArea: default_value
  FundingId:
  _FundingId: default_value
  Funding:
  _Funding: default_value
  Name:
  _Name: not_mapped
  IsSubjectKnowledgeEnhancementAvailable: false
  _IsSubjectKnowledgeEnhancementAvailable: not_mapped
  CourseSubjects:
  _CourseSubjects: default_value

CourseSubject_Mapping: &CourseSubject
  CourseId: 0
  _CourseId: default_value
  Course:
  _Course: default_value
  SubjectId: 0
  _SubjectId: default_value
  Subject:
    <<: *Subject


# based on <<: &IsSalaried_Mapping
Fees_Mapping: &Fees
  Uk: 0
  _Uk: not_mapped
  Eu: 0
  _Eu: not_mapped
  International: 0
  _International: not_mapped

Salary_Mapping: &Salary
  Minimum:
  _Minimum: not_mapped
  Maximum:
  _Maximum: not_mapped

ContactDetails_Mapping: &ContactDetails
  Id: 0
  _Id: default_value
  Phone:
  _Phone: not_mapped
  Fax:
  _Fax: not_mapped
  Email:
  _Email: not_mapped
  Website:
  _Website: not_mapped
  Address:
  _Address: not_mapped
  Course:
  _Course: not_mapped

#Course mappings
Course_default_value_Mapping: &Course_default_value
  Id: 0
  ProviderCodeName:
  ProviderId: 0
  AccreditingProviderId:
  AgeRange: 0
  RouteId: 0
  ProviderLocationId:
  Distance:
  DistanceAddress:
  ContactDetailsId:

Course_nested_complex_Mapping: &Course_nested_complex
  DescriptionSections:
  - <<: *DescriptionSection
    Name: "about this training programme"
    Text: 'AboutCourse'
    __Name: "about this training programme"
    __Text: 'AboutCourse'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "AboutTheCourse" #snc ui section

  - <<: *DescriptionSection
    Name: "interview process"
    Text: 'InterviewProcess'
    __Name: "interview process"
    __Text: 'InterviewProcess'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "InterviewProcess" #snc ui section

  - <<: *DescriptionSection
    Name: "about fees"
    Text: 'FeeDetails'
    __Name: "about fees"
    __Text: 'FeeDetails'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "AboutFees" #snc ui section

  - <<: *DescriptionSection
    Name: "about salary"
    Text: 'SalaryDetails'
    __Name: "about salary"
    __Text: 'SalaryDetails'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "AboutSalary" #snc ui section

  - <<: *DescriptionSection
    Name: "entry requirements"
    Text: 'Qualifications'
    __Name: "entry requirements"
    __Text: 'Qualifications'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "EntryRequirementsQualifications" #snc ui section

  - <<: *DescriptionSection
    Name: "entry requirements personal qualities"
    Text: 'PersonalQualities'
    __Name: "entry requirements personal qualities"
    __Text: 'PersonalQualities'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "EntryRequirementsPersonalQualities" #snc ui section

  - <<: *DescriptionSection
    Name: "entry requirements other"
    Text: 'OtherRequirements'
    __Name: "entry requirements other"
    __Text: 'OtherRequirements'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "EntryRequirementsOther" #snc ui section

  - <<: *DescriptionSection
    Name: "financial support"
    Text: 'FinancialSupport'
    __Name: "financial support"
    __Text: 'FinancialSupport'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "FinancialSupport" #snc ui section

  - <<: *DescriptionSection
    Name: "about school placements"
    Text: 'HowSchoolPlacementsWork'
    __Name: "about school placements"
    __Text: 'HowSchoolPlacementsWork'
    __EnrichmentType: 'course_enrichment'
    __CourseDetailsSections: "AboutSchools" #snc ui section

  - <<: *DescriptionSection
    Name: "about this training provider"
    Text: 'TrainWithUs'
    __Name: "about this training provider"
    __Text: 'TrainWithUs'
    __EnrichmentType: 'provider_enrichment'
    __CourseDetailsSections: "AboutTheProvider" #snc ui section

  - <<: *DescriptionSection
    Name: "about this training provider accrediting"
    Text: GetAccreditingProviderEnrichment(ucasCourseData?.AccreditingProvider?.ProviderCode"
    __Name: "about this training provider accrediting"
    __Text: 'GetAccreditingProviderEnrichment(uproviderEnrichment)'
    EnrichmentType: 'accreditingProvider_provider_enrichment'
    #   var enrichment = enrichmentModel.AccreditingProviderEnrichments.FirstOrDefault(x => x.UcasProviderCode == accreditingProviderCode);

            # if (enrichment == null)
            # {
            #     return "";
            # }

            # return enrichment.Description;
  - <<: *DescriptionSection
    Name: "training with disabilities"
    Text: 'TrainWithDisability'
    __Name: "training with disabilities"
    __Text: 'TrainWithDisability'
    __EnrichmentType: 'provider_enrichment'
    __CourseDetailsSections: "TrainWithDisabilities" #snc ui sectionmpuses:

  - <<: *Campus
    Location:
      <<: *Location
  CourseSubjects:
  - <<: *CourseSubject

Course_nested_object_Mapping: &Course_nested_object
  Provider: # Has a provider
    <<: *Provider
  AccreditingProvider: # Optional accrediting provider (provider type)
    <<: *Provider
  Route:
    <<: *Route
  Fees:
    <<: *Fees
  <<: *IsSalaried
  Salary:
    <<: *Salary
  ProviderLocation:
    <<: *Location
  ContactDetails:
    <<: *ContactDetails

Course_direct_simple_Mapping: &Course_direct_simple
  Name: name
  ProgrammeCode: course_code
  StartDate: start_date

Course_direct_complex_Mapping: &Course_direct_complex
  #  site related
  HasVacancies: has_vacancies?
  _HasVacancies: not_mapped_to_factory
  # subject related
  IsSen: is_send?
  _IsSen: not_mapped_to_factory
  #  site related
  ApplicationsAcceptedFrom: applications_open_from
  _ApplicationsAcceptedFrom: not_mapped_to_factory
  #     ApplicationsAcceptedFrom = sites.Select(x => x.ApplicationsAcceptedFrom).Where(x => x.HasValue)
  #         .OrderBy(x => x.Value)
  #         .FirstOrDefault(),
  Mod: #ucasCourseData.TypeDescription (course.rb program_type_description) need to reverse engineer
  _Mod: not_mapped


    #     Mod = ucasCourseData.TypeDescription,
    # Course domain (csharp)
    # public string TypeDescription => GetCourseVariantType();
    # private string GetCourseVariantType()
    #     {
    #         string result;

    #         switch(Qualification)
    #         {
    #             case CourseQualification.Qts:
    #                 result = "QTS";
    #                 break;
    #             case CourseQualification.QtsWithPgce:
    #                 result = "PGCE with QTS";
    #                 break;
    #             case CourseQualification.QtlsWithPgce:
    #                 result = "PGCE";
    #                 break;
    #             case CourseQualification.QtlsWithPgde:
    #                 result = "PGDE";
    #                 break;
    #             case CourseQualification.QtsWithPgde:
    #                 result = "PGDE with QTS";
    #                 break;
    #             default:
    #                 throw new ArgumentOutOfRangeException($"{nameof(Qualification)} is unknown value: {Qualification}");
    #         }

    #         if ((!string.IsNullOrWhiteSpace(result)) && string.Equals(StudyMode, "B" StringComparison.InvariantCultureIgnoreCase))
    #         {
    #             result += " ";
    #         }
    #         else
    #         {
    #             result += " ";
    #         }

    #         result += GetStudyModeText(StudyMode);

    #         result += string.Equals(ProgramType, "ss" StringComparison.InvariantCultureIgnoreCase)
    #             ? " with salary"
    #             : "";

    #         result += string.Equals(ProgramType, "ta" StringComparison.InvariantCultureIgnoreCase)
    #             ? " teaching apprenticeship"
    #             : "";

    #         return result;
    #     }
    # [TestCase(CourseQualification.Qts, "F", "SS", "QTS full time with salary")]

    # [TestCase(CourseQualification.Qts, "F", "SS", "QTS full time with salary")]
    # [TestCase(CourseQualification.QtsWithPgce, "f", "ss", "PGCE with QTS full time with salary")]
    # [TestCase(CourseQualification.QtsWithPgce, "F", "SS", "PGCE with QTS full time with salary")]
    # [TestCase(CourseQualification.QtsWithPgce, "p", "ss", "PGCE with QTS part time with salary")]
    # [TestCase(CourseQualification.QtsWithPgce, "P", "SS", "PGCE with QTS part time with salary")]
    # [TestCase(CourseQualification.Qts, "f", "sd", "QTS full time")]
    # [TestCase(CourseQualification.Qts, "F", "SD", "QTS full time")]
    # [TestCase(CourseQualification.Qts, "f", "sd", "QTS full time")]
    # [TestCase(CourseQualification.Qts, "F", "SD", "QTS full time")]
    # [TestCase(CourseQualification.QtsWithPgce, "f", "sd", "PGCE with QTS full time")]
    # [TestCase(CourseQualification.QtsWithPgce, "F", "SD", "PGCE with QTS full time")]
    # [TestCase(CourseQualification.QtsWithPgce, "p", "sd", "PGCE with QTS part time")]
    # [TestCase(CourseQualification.QtsWithPgce, "P", "SD", "PGCE with QTS part time")]
    # [TestCase(CourseQualification.QtsWithPgce, "B", "SD", "PGCE with QTS, full time or part time")]
    # [TestCase(CourseQualification.QtsWithPgce, "b", "sd", "PGCE with QTS, full time or part time")]
    # [TestCase(CourseQualification.Qts, "f", "ta", "QTS full time teaching apprenticeship")]
    # public void TestGetCourseVariantType(CourseQualification qualification, string studyMode, string programType, string expectedResult)
    # {
    #     var course = new Course
    #     {
    #         Qualification = qualification,
    #         StudyMode = studyMode,
    #         ProgramType = programType
    #     };
    #     var result = course.TypeDescription;
    #     result.Should().Be(expectedResult);
    # }
  IncludesPgce: 1 #MapQualification(ucasCourseData.Qualification) (enum)
  _IncludesPgce: not_mapped
#  private static IDictionary<CourseQualification, IncludesPgce> qualificationMap = new Dictionary<CourseQualification, IncludesPgce>
#         {
#             {CourseQualification.Qts, IncludesPgce.No},
#             {CourseQualification.QtsWithPgce, IncludesPgce.Yes},
#             {CourseQualification.QtsWithPgde, IncludesPgce.QtsWithPgde},
#             {CourseQualification.QtlsWithPgce, IncludesPgce.QtlsWithPgce},
#             {CourseQualification.QtlsWithPgde, IncludesPgce.QtlsWithPgde}
#         };
#         private IncludesPgce MapQualification(CourseQualification qualification)
#         {
#             if (qualificationMap.TryGetValue(qualification, out IncludesPgce result))
#             {
#                 return result;
#             }
#             throw new ArgumentOutOfRangeException(nameof(qualification), qualification, "Could not map qualifications");
#         }
  FullTime:
  _FullTime: not_mapped
      #     FullTime = ucasCourseData.StudyMode == "P" ? VacancyStatus.NA : VacancyStatus.Vacancies,
  PartTime:
  _PartTime: not_mapped
      #     PartTime = ucasCourseData.StudyMode == "F" ? VacancyStatus.NA : VacancyStatus.Vacancies,
  # public enum VacancyStatus
  #   {
  #       NoVacancies = 0,

  #       Vacancies = 1,

  #       WaitingList = 2,

  #       NA = 3
  #   }

Course_direct_enrichment_Mapping: &Course_direct_enrichment
  Duration: enrichement.course_length
  _Duration: not_mapped

  # Actual course
Course_Full_Mapping:
  <<: *Course_default_value     # mapped
  <<: *Course_direct_simple     # mapped
  <<: *Course_direct_complex    # half
  <<: *Course_direct_enrichment
  <<: *Course_nested_object
  <<: *Course_nested_complex
