---
openapi: 3.0.0
info:
  version: 1.0.0
  title: Teacher Training Courses API
  contact:
    name: DfE
    email: becomingateacher@digital.education.gov.uk
  description: "API for DfE's postgraduate teacher training course service."
servers:
  - url: https://api.publish-teacher-training-courses.service.gov.uk/api/public/{version}
    description: "Production url."
    variables:
      version:
        enum:
          - v1
        default: v1
components:
  schemas:
    Sort:
      type: array
      example: "provider.provider_name,name"
      description: "This schema is used to sort a collection."
      items:
        type: string
        example: "name"
        description: "A comma delimited string of fields to sort the collection by."
    Filter:
      type: object
      example: ""
      description: "This schema is used to search within collections to return more specific results."
      properties:
        has_vacancies:
          description: "Return courses that only have vacancies?"
          type: boolean
          example: true
        funding:
          description: "Return courses depending on how it is funded. This is a comma delimited string. If multiple funding options are provided then any course matching any one of the options provided will be retuned, i.e. the OR operator is used."
          type: string
          example: "salary,fee"
          enum:
            - salary
            - apprenticeship
            - fee
        qualification:
          description: "Search courses based on the award given on course completion. This is a comma delimited string. If multiple qualifications are given then any course matching any one of the qualifications provided will be returned, i.e. the OR operator is used."
          type: string
          example: "qts,pgce,pgde"
          enum:
            - qts
            - pgce_with_qts
            - pgde
            - pgce
            - pgde_with_qts
        study_type:
          description: "Search full time or part time courses or both. This is a comma delimited string. If both full_time and part_time is specified we return courses that are either full time or part time."
          type: string
          example: "full_time,part_time"
          enum:
            - full_time
            - part_time
            - full_time_or_part_time
        subjects:
          description: "Returns courses that include at least one of the given subjects. This is a comma delimied string. If multiple subjects are given a course that has any one of the subjects specified will be returned, i.e. the OR operator is used."
          type: string
          example: "00,01,W1"
          enum:
            - "00"
            - "01"
            - "02"
            - "03"
            - "04"
            - "06"
            - "07"
            - "W1"
            - "F0"
            - "C1"
            - "08"
            - "F1"
            - "09"
            - "Q8"
            - "P3"
            - "11"
            - "12"
            - "DT"
            - "13"
            - "L1"
            - "Q3"
            - "F8"
            - "L5"
            - "V1"
            - "G1"
            - "W3"
            - "P1"
            - "C6"
            - "F3"
            - "C8"
            - "V6"
            - "14"
            - "15"
            - "16"
            - "17"
            - "18"
            - "19"
            - "20"
            - "21"
            - "22"
            - "41"
            - "24"
        send_courses:
          description: "Only return courses that have a SEND specialism."
          type: boolean
          example: true
        latitude:
          description: "Latitude of origin when performing a search by radius."
          type: number
          example: 54.9753348
        longitude:
          description: "Longitude of origin when performing a search by radius."
          type: number
          example: -1.6100477
        radius:
          description: "Search radius in miles from given latitude and longitude."
          type: number
          example: 20
    CourseResource:
      description: "This schema provides metadata about a course."
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
        type:
          type: string
          example: "courses"
        attributes:
          $ref: "#/components/schemas/CourseAttributes"
        relationships:
          $ref: "#/components/schemas/CourseRelationships"
    CourseListResponse:
      description: "This schema is used to return a collection of courses."
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CourseResource"
        included:
          $ref: "#/components/schemas/Included"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    CourseSingleResponse:
      description: "This schema is used to return a single course."
      type: object
      required:
        - data
        - jsonapi
      properties:
        data:
          $ref: "#/components/schemas/CourseResource"
        included:
          $ref: "#/components/schemas/Included"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    Included:
      description: "This schema is used to return requested associated objects if there are any."
      type: array
      items:
        $ref: "#/components/schemas/Resource"
    JSONAPI:
      description: "This returns the version of JSON API in use."
      type: object
      required:
        - version
      properties:
        version:
          type: string
          example: "1.0"
    LocationAttributes:
      description: "This schema is used to describe a location."
      type: object
      properties:
        code:
          type: string
          example: "-"
        name:
          type: string
          description: "The name of the location."
          example: "Main Site"
        street_address_1:
          type: string
          description: "Building or street address line one."
          example: "Barnsley Road"
        street_address_2:
          type: string
          description: "Building or street address line two."
          example: "Wath-upon-Dearne"
        city:
          type: string
          description: "Town or city."
          example: "Rotherham"
        county:
          type: string
          description: "County."
          example: "South Yorkshire"
        postcode:
          type: string
          description: "The postcode of the location."
          example: "S63 6PY"
        region_code:
          type: string
          example: "yorkshire_and_the_humber"
        latitude:
          type: number
          description: "The latitude of the location."
          example: 53.5082828
        longitude:
          type: number
          description: "The longitude of the location."
          example: -1.3603394
    LocationResource:
      description: "This schema provides metadata about a location."
      type: object
      properties:
        id:
          type: string
          example: "11214485"
        type:
          type: string
          example: "locations"
        attributes:
          $ref: "#/components/schemas/LocationAttributes"
        relationships:
          $ref: "#/components/schemas/LocationRelationships"
    LocationListResponse:
      description: "This schema is used to return a collection of locations."
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/LocationResource"
        included:
          $ref: "#/components/schemas/Included"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    LocationStatusResource:
      description: "This schema provides metadata about a location status."
      type: object
      properties:
        id:
          type: string
          example: "22329867"
        type:
          type: string
          example: site_statuses
        attributes:
          $ref: "#/components/schemas/LocationStatusAttributes"
    ProviderResource:
      description: "This schema provides metadata about a provider."
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          example: 1
        type:
          type: string
          example: "providers"
        attributes:
          $ref: "#/components/schemas/ProviderAttributes"
        relationships:
          $ref: "#/components/schemas/ProviderRelationships"
    ProviderListResponse:
      description: "This schema is used to return a collection of providers."
      type: object
      required:
        - data
        - jsonapi
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProviderResource"
        included:
          $ref: "#/components/schemas/Included"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    NotFoundResponse:
      description: "This schema is used to return a not found response."
      type: object
      required:
        - data
        - jsonapi
      properties:
        data:
          nullable: true
          example: null
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    ProviderSingleResponse:
      description: "This schema is used to return a single provider."
      type: object
      required:
        - data
        - jsonapi
      properties:
        data:
          $ref: "#/components/schemas/ProviderResource"
        included:
          $ref: "#/components/schemas/Included"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    ProviderSuggestion:
      description: "This schema provides metadata about a provider."
      type: object
      properties:
        name:
          type: string
          example: "066"
        code:
          type: string
          example: "Oxford Brookes University"
    ProviderSuggestionListResponse:
      description: "This schema is used to return a collection of provider suggestions."
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ProviderSuggestion"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
    Relationship:
      description: "This schema describes a single associated object."
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ResourceIdentifier"
        meta:
          type: object
    RelationshipList:
      description: "This schema describes a collection of associated objects."
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ResourceIdentifier"
    Resource:
      anyOf:
        - $ref: "#/components/schemas/CourseResource"
        - $ref: "#/components/schemas/LocationResource"
        - $ref: "#/components/schemas/LocationStatusResource"
        - $ref: "#/components/schemas/ProviderResource"
        - $ref: "#/components/schemas/RecruitmentCycleResource"
        - $ref: "#/components/schemas/SubjectResource"
      discriminator:
        propertyName: type
    ResourceIdentifier:
      description: "As included associated data can be polymorphic, this schema is used to describe what type of resource is being presented."
      type: object
      required:
        - type
        - id
      properties:
        type:
          type: string
        id:
          type: string
    RecruitmentCycleResource:
      description: "This schema provides metadata about a recruitment cycle."
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: integer
        type:
          type: string
        attributes:
          $ref: "#/components/schemas/RecruitmentCycleAttributes"
    SubjectResource:
      description: "This schema provides metadata about a subject."
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: integer
        type:
          type: string
          example: subjects
        attributes:
          $ref: "#/components/schemas/SubjectAttributes"
    SubjectAreaResource:
      description: "This schema provides metadata about a subject area."
      type: object
      properties:
        id:
          type: string
          example: "PrimarySubject"
        type:
          type: string
          example: "subject_areas"
        attributes:
          $ref: "#/components/schemas/SubjectAreaAttributes"
        relationships:
          $ref: "#/components/schemas/SubjectAreaRelationships"
    SubjectAreaListResponse:
      description: "This schema is used to return a collection of subject areas."
      type: object
      required:
        - data
        - jsonapi
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SubjectAreaResource"
        included:
          $ref: "#/components/schemas/Included"
        jsonapi:
          $ref: "#/components/schemas/JSONAPI"
