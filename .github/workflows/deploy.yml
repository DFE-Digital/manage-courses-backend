name: Deploy

on:
  workflow_dispatch:
    inputs:
      qa:
        description: Deploy to qa?
        default: 'false'
        required: true
      staging:
        description: Deploy to staging?
        default: 'false'
        required: true
      production:
        description: Deploy to production?
        default: 'false'
        required: true
      sandbox:
        description: Deploy to sandbox?
        default: 'false'
        required: true
      rollover:
        description: Deploy to rollover?
        default: 'false'
        required: true
      pr:
        description: PR number for the review app
        required: false        
      sha:
        description: Commit sha to be deployed
        required: true

jobs:
  prepare-matrix:
    name: Prepare Environment Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      environments: ${{ steps.select-environments.outputs.environments || steps.set-pr-environment.outputs.environments }}
    steps:
      - id:   select-environments
        uses: DFE-Digital/bat-infrastructure/actions/prepare-environment-matrix@main

      - id:  set-pr-environment
        if:  github.event.inputs.pr != ''
        run: echo "::set-output name=environments::$PR"
        env:
          PR: '{"environment": ["review"], "include": [{"environment": "review","pull_request_number": "${{ github.event.inputs.pr }}"}]}'

      - uses: DFE-Digital/github-actions/turnstyle@master
        name: Wait for other inprogress deployment runs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: ${{ matrix.environment }} Deployment
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    strategy:
      max-parallel: 1
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.environments) }}
    steps:
      - name: Start ${{ matrix.environment }} Deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env:   ${{ matrix.pull_request_number || matrix.environment }}
          ref:   ${{ github.event.inputs.sha }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform v0.13.5
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.13.5

      - name: Set Environment variables
        run: |
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV

          . terraform/workspace_variables/$DEPLOY_ENV.sh
          echo "TF_VAR_key_vault_name=$TF_VAR_key_vault_name" >> $GITHUB_ENV
          echo "TF_VAR_key_vault_app_secret_name=$TF_VAR_key_vault_app_secret_name" >> $GITHUB_ENV
          echo "TF_VAR_key_vault_infra_secret_name=$TF_VAR_key_vault_infra_secret_name" >> $GITHUB_ENV
          if [ "${{ matrix.environment }}" = "review" ]; then 
            echo "BACKEND_KEY=-backend-config=key=pr-${{ matrix.pull_request_number }}.tfstate" >> $GITHUB_ENV; 
            echo "TF_VAR_paas_web_app_host_name=pr-${{ matrix.pull_request_number }}" >> $GITHUB_ENV; 
          fi;
        env:
          DOCKER_IMAGE: ${{ format('dfedigital/teacher-training-api:paas-{0}', github.event.inputs.sha) }}
          DEPLOY_ENV: ${{ matrix.environment }}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}

      - name: Validate Azure Key Vault secrets
        uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
        with:
          KEY_VAULT: ${{ env.TF_VAR_key_vault_name }}
          SECRETS: |
            ${{ env.TF_VAR_key_vault_app_secret_name }}
            ${{ env.TF_VAR_key_vault_infra_secret_name }}

      - name: Terraform init, plan & apply
        working-directory: terraform
        run: |
            terraform init -backend-config workspace_variables/${{ env.DEPLOY_ENV }}_backend.tfvars $BACKEND_KEY
            terraform plan -var-file workspace_variables/${{ env.DEPLOY_ENV }}.tfvars -out tfplan
            terraform apply -auto-approve -input=false "tfplan"
        env:
          ARM_ACCESS_KEY:             ${{ secrets[format('ARM_ACCESS_KEY_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_docker_image:   ${{ env.DOCKER_IMAGE }}
          TF_VAR_azure_credentials:   ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}

      - name: Trigger ${{ env.DEPLOY_ENV }} Smoke Tests
        if: matrix.environment != 'review'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Smoke Tests
          token:    ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs:   '{"environment": "${{ env.DEPLOY_ENV }}"}'

      - name: Wait for smoke tests
        id: wait_for_smoke_tests
        if: matrix.environment != 'review'
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref:   ${{ github.ref }}
          checkName: smoke-tests-${{ env.DEPLOY_ENV }}
          timeoutSeconds:  300
          intervalSeconds: 15

      - name: Stop when smoke tests fail
        if: ${{ matrix.environment != 'review' && steps.wait_for_smoke_tests.outputs.conclusion == 'failure' }}
        run: exit 1

      - name: Update ${{ matrix.environment }} status
        if: ${{ always() }}
        uses: bobheadxi/deployments@v0.4.3
        with:
          step:   finish
          token:  ${{ secrets.GITHUB_TOKEN }}
          env:    ${{ matrix.pull_request_number || matrix.environment }}
          ref:    ${{ github.event.inputs.sha }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Alert on Failure
        if: ${{ failure() && github.ref == 'refs/heads/master' }}
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: twd_bat_devops
          SLACK_COLOR: '#ef5343'
          SLACK_ICON_EMOJI: ':github-logo:'
          SLACK_USERNAME: Teacher Training API
          SLACK_TITLE: Deploy to ${{ matrix.environment }} Failed
          SLACK_MESSAGE: ':alert: <!channel> Build failure on ${{ matrix.environment }} :sadparrot:'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
