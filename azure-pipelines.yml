trigger:
  batch: true
  branches:
    include:
      - "*"
pr: none
pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: 'manage-courses-backend-poc'
  imageNameBgFindSync: 'manage-courses-bg-find-sync'
  # Support multiple docker-compose files to allow travis and az pipelines to co exist: https://docs.docker.com/compose/extends/#multiple-compose-files
  dockerOverride: 'docker-compose -f docker-compose.yml -f docker-compose.az.yml'

steps:
- script: |
    GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
    docker_path=$(dockerHubUsername)/$(imageName)
    docker_bg_find_sync_path=$(dockerHubUsername)/$(imageNameBgFindSync)
    echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
    echo "##vso[task.setvariable variable=docker_path;]$docker_path"
    echo "##vso[task.setvariable variable=docker_bg_find_sync_path;]$docker_bg_find_sync_path"
  displayName: 'Set version number'

- script: docker pull $(docker_path):latest || true
  displayName: "Pull latest docker image to cache"
- script: |
    $DOCKER_OVERRIDE build
    $DOCKER_OVERRIDE up --no-build -d
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "./wait-for-command.sh -c 'nc -z db 5432' -s 0 -t 20"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rails db:setup"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "apk --no-cache add curl"
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rake cc:setup"
  displayName: 'Build & setup'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)
    CC_TEST_REPORTER_ID: $(cc_Reporter_ID)
- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c 'bundle exec rake spec SPEC_OPTS="--format RspecJunitFormatter --out ./rspec-results.xml"'
  displayName: 'Execute tests'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)
- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rubocop app config db lib spec --format clang"
  displayName: 'Execute linters'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)
- script: |
    $DOCKER_OVERRIDE exec -T web /bin/sh -c "bundle exec rake cc:report"
  displayName: 'Execute Code Climate reporter'
  env:
    DOCKER_OVERRIDE: $(dockerOverride)
    dockerHubUsername: $(dockerHubUsername)
    dockerHubImageName: $(imageName)
    CC_TEST_REPORTER_ID: $(ccReporterID)
    AGENT_JOBSTATUS: $(Agent.JobStatus)
- task: Docker@1
  displayName: Tag image with current build number $(Build.BuildNumber)
  inputs:
    command: Tag image
    imageName: "$(docker_path):latest"
    arguments: "$(docker_path):$(Build.BuildNumber)"
- task: Docker@1
  displayName: Docker Hub login
  inputs:
    command: "login"
    containerregistrytype: Container Registry
    dockerRegistryEndpoint: DfE Docker Hub
- task: Docker@1
  displayName: Push tagged image
  inputs:
    command: Push an image
    imageName: "$(docker_path):$(Build.BuildNumber)"
- task: Docker@1
  displayName: Push tagged image (latest) if master
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: Push an image
    imageName: "$(docker_path):latest"

- task: Docker@1
  displayName: Tag image with current build number $(Build.BuildNumber)
  inputs:
    command: Tag image
    imageName: "$(docker_bg_find_sync_path):latest"
    arguments: "$(docker_bg_find_sync_path):$(Build.BuildNumber)"

- task: Docker@1
  displayName: Push tagged image
  inputs:
    command: Push an image
    imageName: "$(docker_bg_find_sync_path):$(Build.BuildNumber)"

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '*.xml'
    failedTaskOnFailedTest: true
