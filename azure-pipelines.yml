trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: 'manage-courses-backend-poc'

steps:
- script: |
    GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
    docker_path=$(dockerHubUsername)/$(imageName)
    echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
    echo "##vso[task.setvariable variable=docker_path;]$docker_path"
  displayName: 'Set version number'

- script: |
    docker-compose pull
    docker-compose build
    docker-compose up --no-build -d
    docker-compose exec -T web /bin/sh -c "./wait-for-command.sh -c 'nc -z db 5432' -s 0 -t 20"
    docker-compose exec -T web /bin/sh -c "bundle exec rails db:setup"
  displayName: 'Build & setup'

- script: |
    docker-compose exec web /bin/sh -c 'bundle exec rake spec SPEC_OPTS="--format RspecJunitFormatter"' | sed -e 1d >> rspec-results.xml
  displayName: 'Execute tests'

- script: |
    docker-compose exec web /bin/sh -c "bundle exec govuk-lint-ruby app config db lib spec --format clang"
  displayName: 'Execute linters'

- script: |
    echo $password | docker login --username $(dockerHubUsername) --password-stdin
    docker tag "$(docker_path):latest" "$(docker_path):$GIT_SHORT_SHA"
    docker push "$(docker_path):$GIT_SHORT_SHA"
  displayName: 'Push image'
  env:
    password: $(dockerHubPassword)

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '*.xml'
