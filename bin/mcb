#!/usr/bin/env ruby
# -!- mode: ruby -!-

# Wrapper for management functions for manage-courses-backend
#
# Run with:
#
#  bundle exec mcb

require 'ap'
require 'cri'
require 'pry'
require 'table_print'
require 'terminal-table'

lib_dir = File.expand_path 'lib'

require_relative "#{lib_dir}/mcb"

tp.set :capitalize_headers, false

mcb = Cri::Command.define do
  name        'mcb'
  usage       'mcb [options]'
  summary     'wrapper for management of manage-curses-backend app'

  option :v, 'verbose', 'display progess info' do |value|
    $verbosity = :verbose if value
  end

  flag :h, :help, 'show help for this command' do |_value, cmd|
    puts cmd.help
    exit 0
  end
end

MCB.load_commands(mcb, "#{lib_dir}/mcb/commands")

def verbose(msg)
  if $verbosity == :verbose
    puts msg
  end
end

def error(msg)
  puts msg
end

def each_v1_provider(opts)
  # We only need httparty for API V1 calls
  require 'httparty'

  url = opts[:url]
  page_count = 0
  max_pages = 30

  Enumerator.new do |y|
    loop do
      if page_count > max_pages
        raise RuntimeError.new(
          "too many page requests, stopping at #{page_count}" +
          " as a safeguard. Increase max page_count if necessary."
        )
      end

      verbose "Requesting page #{page_count + 1}: #{url}"
      response = HTTParty.get(
        url,
        headers: {
          authorization: "Bearer #{opts[:token]}"
        }
      )
      providers_list = JSON.parse(response.body)
      break if providers_list.empty?

      # Send each provider to the consumer of this enumerator
      providers_list.each { |provider| y << provider }

      url = response.headers[:link].sub(/;.*/, '')
      page_count += 1
    end
  end
end

mcb.run(ARGV.dup) if File.basename(__FILE__) == File.basename($0)
