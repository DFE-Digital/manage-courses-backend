#!/usr/bin/env ruby
# -!- mode: ruby -!-

# Wrapper for management functions for manage-courses-backend
#
# Run with:
#
#  bundle exec mcb

require 'ap'
require 'cri'
require 'rainbow'
require 'pry'
require 'table_print'
require 'terminal-table'
require 'tabulo'

lib_dir = File.expand_path 'lib'

$LOAD_PATH << lib_dir
require 'mcb'
require 'mcb/azure'
require 'mcb/config'
require 'mcb/course_show'
require 'mcb/cli/base_cli'
require 'mcb/cli/course_cli'
require 'mcb/cli/provider_cli'
require 'mcb/editor/base'
require 'mcb/editor/courses_editor'
require 'mcb/editor/provider_editor'
require 'mcb/grant_access_wizard'
require 'mcb/revoke_access_wizard'
require 'mcb/render'
require 'mcb/render/active_record'
require 'mcb/render/apiv1'

tp.set :capitalize_headers, false

$mcb = Cri::Command.define do
  name        'mcb'
  usage       'mcb [options]'
  summary     'wrapper for management of manage-curses-backend app'

  option :v, 'verbose',
         'display additional info (for commands that support it)' do |value|
    MCB::LOGGER.level = Logger::INFO
    $verbosity = :verbose if value
  end

  flag :h, :help, 'show help for this command' do |_value, cmd|
    puts cmd.help

    prefix = "    #{cmd.name == 'mcb' ? 'bin/mcb' : cmd.name} "
    puts_command_index(cmd, prefix, 1)

    # Don't exit if we're in repl-mode.
    exit 0 unless $mcb_repl_mode
  end

  option :c, :config, 'use provided config file',
         argument: :required do |config_file|
    MCB.config_file = config_file
  end
end

def puts_command_index(cmd, prefix, depth)
  if depth == 1
    return if cmd.commands.empty?

    puts
    puts Rainbow("INDEX").red.bright
  end

  # split up top level groups
  puts "    ---" if depth == 2 && !cmd.commands.count.zero?

  pretty_cmd(cmd, prefix)

  # recurse
  cmd.commands.sort_by(&:name).each do |c|
    puts_command_index(c, prefix + c.name + " ", depth + 1)
  end
end

def pretty_cmd(cmd, prefix)
  aligned_cmd_name = prefix.ljust(35, ' ')
  coloured_name = Rainbow(aligned_cmd_name).green
  puts "#{coloured_name} #{cmd.summary}"
end

MCB.load_commands($mcb, "#{lib_dir}/mcb/commands")

def verbose(msg)
  MCB::LOGGER.info msg
end

def error(msg)
  puts msg
end

if File.basename(__FILE__) == File.basename($0)
  if MCB.launch_repl?(ARGV)
    MCB.start_mcb_repl(ARGV)
  else
    $mcb.run(ARGV.dup)
  end
end
