#!/usr/bin/env ruby
# -!- mode: ruby -!-

# Wrapper for management functions for manage-courses-backend
#
# Run with:
#
#  bundle exec mcb

require 'ap'
require 'cri'
require 'rainbow'
require 'pry'
require 'table_print'
require 'terminal-table'

lib_dir = File.expand_path 'lib'

$LOAD_PATH << lib_dir
require 'mcb'
require 'mcb/azure'
require 'mcb/config'
require 'mcb/course_show'
require 'mcb/grant_access_wizard'

tp.set :capitalize_headers, false

$mcb = Cri::Command.define do
  name        'mcb'
  usage       'mcb [options]'
  summary     'wrapper for management of manage-curses-backend app'

  option :v, 'verbose',
         'display additional info (for commands that support it)' do |value|
    MCB::LOGGER.level = Logger::INFO
    $verbosity = :verbose if value
  end

  flag :h, :help, 'show help for this command' do |_value, cmd|
    puts cmd.help
    puts
    puts Rainbow("SUBCOMMANDS").red.bright
    prefix = "    "
    cmd.commands.each do |c|
      show_all_commands(c, prefix + c.name + " ")
      puts
    end
    exit 0
  end

  option :c, :config, 'use provided config file',
         argument: :required do |config_file|
    MCB.config_file = config_file
  end
end

def show_all_commands(cmd, prefix)
  cmd.commands.each do |c|
    aligned_cmd_name = (prefix + c.name).ljust(37, ' ')
    coloured_name = Rainbow(aligned_cmd_name).green
    puts "#{coloured_name} #{c.summary}"
    show_all_commands(c, prefix + c.name + " ")
  end
end

MCB.load_commands($mcb, "#{lib_dir}/mcb/commands")

def verbose(msg)
  MCB::LOGGER.info msg
end

def error(msg)
  puts msg
end

$mcb.run(ARGV.dup) if File.basename(__FILE__) == File.basename($0)
